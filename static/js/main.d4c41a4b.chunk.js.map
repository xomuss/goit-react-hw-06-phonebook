{"version":3,"sources":["Components/ContactsList/ContactList.module.css","Components/Form/Form.module.css","Components/Filter/Filter.module.css","redux/phonebook/phonebook-actions.js","Components/ContactsList/ContactsList.js","Components/Form/Form.js","Components/Filter/Filter.js","App.js","redux/phonebook/phonebook-reduser.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","payload","name","number","id","shortid","generate","deleteContact","filterContscts","getVisibleContacts","allContacts","filter","filterNormalize","toLowerCase","contact","includes","connect","contacts","items","contactsData","dispatch","onDeleteContact","actions","className","styles","contsct__list","map","contact__list_el","contact__list_text","onClick","Form","state","nameInputId","telInputId","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","find","onSubmit","reset","alert","this","htmlFor","form__input","onChange","type","pattern","title","required","form__btn","Component","cont","filter__input","App","formSubmitHandler","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReduser","persistReducer","phonebookReduser","console","log","getDefaultMiddleware","process","store","configureStore","reducer","devTools","middleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.d4c41a4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contsct__list\":\"ContactList_contsct__list__3xhyM\",\"contact__list_el\":\"ContactList_contact__list_el__3adlL\",\"contact__list_text\":\"ContactList_contact__list_text__2BC_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__input\":\"Form_form__input__3g_Hd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__input\":\"Filter_filter__input__HyeJh\"};","import shortid from 'shortid';\r\n// import types from './phonebook-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     name,\r\n//     number,\r\n//     id: shortid.generate(),\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const filterContscts = value => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\nconst addContact = createAction('phonebook/add', ({ name, number }) => ({\r\n  payload: {\r\n    name,\r\n    number,\r\n    id: shortid.generate(),\r\n  },\r\n}));\r\nconst deleteContact = createAction('phonebook/delete');\r\nconst filterContscts = createAction('phonebook/changeFiler');\r\n\r\nexport default { addContact, deleteContact, filterContscts };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/phonebook/phonebook-actions';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactsList = ({ contactsData, onDeleteContact }) => (\r\n  <ul className={styles.contsct__list}>\r\n    {contactsData.map(({ name, number, id }) => (\r\n      <li key={id} className={styles.contact__list_el}>\r\n        <p className={styles.contact__list_text}>\r\n          {name}: {number}\r\n        </p>\r\n        <button onClick={() => onDeleteContact(id)}>delete</button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const filterNormalize = filter.toLowerCase();\r\n\r\n  return allContacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filterNormalize),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contactsData: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(actions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport actions from '../../redux/phonebook/phonebook-actions';\r\nimport styles from './Form.module.css';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  telInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const foundName = this.props.contacts.find(({ name }) =>\r\n      name.includes(this.state.name),\r\n    );\r\n    if (!foundName) {\r\n      this.props.onSubmit(this.state);\r\n      this.reset();\r\n      return;\r\n    }\r\n    alert('this name already exist');\r\n\r\n    // this.props.onSubmit(this.state);\r\n    // : alert('This name already exist');\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name\r\n          <input\r\n            className={styles.form__input}\r\n            id={this.nameInputId}\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label htmlFor={this.telInputId}>\r\n          Telephone\r\n          <input\r\n            className={styles.form__input}\r\n            id={this.telInputId}\r\n            onChange={this.handleChange}\r\n            value={this.state.number}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.form__btn} type=\"submit\">\r\n          Add Contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: cont => dispatch(actions.addContact(cont)),\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import React from 'react';\r\nimport styles from './Filter.module.css';\r\nimport actions from '../../redux/phonebook/phonebook-actions';\r\nimport { connect } from 'react-redux';\r\nimport { findRenderedDOMComponentWithTag } from 'react-dom/cjs/react-dom-test-utils.production.min';\r\n\r\nconst Filter = ({ onChange, value }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input\r\n      className={styles.filter__input}\r\n      onChange={onChange}\r\n      value={value}\r\n      name=\"filter\"\r\n    />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: state.contacts.filter,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => {\r\n    const value = e.target.value;\r\n    return dispatch(actions.filterContscts(value));\r\n  },\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport ContactsList from './Components/ContactsList';\r\nimport Form from './Components/Form';\r\nimport Filter from './Components/Filter';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // contacts: [],\r\n    // filter: '',\r\n  };\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(contacts);\r\n\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>Phone Book</h1>\r\n        <Form onSubmit={this.formSubmitHandler} />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './phonebook-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filterContscts]: (_, { payload }) => payload,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport phonebookReduser from './phonebook/phonebook-reduser';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst rootReduser = combineReducers({\r\n  contacts: persistReducer(contactsPersistConfig, phonebookReduser),\r\n});\r\n\r\n// const rootReduser = combineReducers({\r\n//   contacts: phonebookReduser,\r\n// });\r\n\r\n// const store = createStore(rootReduser, composeWithDevTools());\r\nconsole.log(getDefaultMiddleware());\r\nconsole.log(process.env.NODE_ENV);\r\n\r\nconst store = configureStore({\r\n  reducer: rootReduser,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}